/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tamatrixcalc;

import java.awt.Label;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author alkha
 */
public class matrixcalc extends javax.swing.JFrame {

    /**
     * Creates new form matrixcalc
     */
    private static int col, row;  //dimentions
    private static double myMatrix[][];
    private static double tempMatrix[][];
    private static JTextField inputField[][];
    private static int result;
    private static JButton minusB, plusB, inverseB,
            multiplyB, nMultiplyB, nDivisionB,
            getValueB, showMatrix, transposing,
            newMatrix;
    private static JPanel choosePanel[] = new JPanel[8];
    private static int lastCol, lastRow;

    public matrixcalc() {
        initComponents();
        col = row = 0;
        myMatrix = new double[0][0];
        //String textFieldStrings[][] = new String[100][100];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        showmtrx = new javax.swing.JButton();
        additionMatrix = new javax.swing.JButton();
        substractMatrix = new javax.swing.JButton();
        multiplyMatrix = new javax.swing.JButton();
        multiplyScalar = new javax.swing.JButton();
        divideScaler = new javax.swing.JButton();
        transposeMatrix = new javax.swing.JButton();
        determinantMatrix = new javax.swing.JButton();
        inversMatrix = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matrix Calculator");
        setResizable(false);
        setSize(new java.awt.Dimension(588, 357));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tamatrixcalc/crop.jpg"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(182, 178, 178));

        jLabel2.setFont(new java.awt.Font("Bebas Neue Bold", 0, 36)); // NOI18N
        jLabel2.setText("MATRIX CALCULATOR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(81, 81, 81))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(20, 20, 20))
        );

        showmtrx.setText("Show Matrix");
        showmtrx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showmtrxActionPerformed(evt);
            }
        });

        additionMatrix.setText("Addition");
        additionMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additionMatrixActionPerformed(evt);
            }
        });

        substractMatrix.setText("Substract");
        substractMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substractMatrixActionPerformed(evt);
            }
        });

        multiplyMatrix.setText("Multiply by Matrix");
        multiplyMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyMatrixActionPerformed(evt);
            }
        });

        multiplyScalar.setText("Multiply by Scalar");
        multiplyScalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyScalarActionPerformed(evt);
            }
        });

        divideScaler.setText("Dividing by Scaler");
        divideScaler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideScalerActionPerformed(evt);
            }
        });

        transposeMatrix.setText("Transpose");
        transposeMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transposeMatrixActionPerformed(evt);
            }
        });

        determinantMatrix.setText("Determinant");
        determinantMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                determinantMatrixActionPerformed(evt);
            }
        });

        inversMatrix.setText("Inversing");
        inversMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversMatrixActionPerformed(evt);
            }
        });

        jButton10.setText("New Matrix");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel3.setText("Credit");

        jLabel4.setText("All Copyright nyxx-bit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(149, 149, 149)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(showmtrx, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(additionMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(transposeMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(multiplyMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(multiplyScalar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(determinantMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(substractMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(divideScaler, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                            .addComponent(inversMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(2, 10, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(additionMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(substractMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showmtrx, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(multiplyMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(divideScaler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(multiplyScalar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(transposeMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(determinantMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inversMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        
    private static void getDimension() {
        JTextField lField = new JTextField(5); //lenght field 
        JTextField wField = new JTextField(5); //col field

        //design input line
        JPanel choosePanel[] = new JPanel[2];
        choosePanel[0] = new JPanel();
        choosePanel[1] = new JPanel();
        choosePanel[0].add(new JLabel("Enter Dimensions"));
        choosePanel[1].add(new JLabel("Rows:"));
        choosePanel[1].add(lField);
        choosePanel[1].add(Box.createHorizontalStrut(15)); // a spacer
        choosePanel[1].add(new JLabel("Cols:"));
        choosePanel[1].add(wField);

        result = JOptionPane.showConfirmDialog(null, choosePanel,
                null, JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        //save last dimensions
        lastCol = col;
        lastRow = row;

        //ok option
        if (result == 0) {

            if (wField.getText().equals("")) {
                col = 0;
            } else {
//                if (isInt(wField.getText())) {
                    col = Integer.parseInt(wField.getText());
//                } else {
//                    JOptionPane.showMessageDialog(null, "Wrong Dimensions");
//                    col = lastCol;
//                    row = lastRow;
//                    return;
//                }

//                if (isInt(lField.getText())) {
                    row = Integer.parseInt(lField.getText());
//                } else {
//                    JOptionPane.showMessageDialog(null, "Wrong Dimensions");
//                    col = lastCol;
//                    row = lastRow;
//                    return;
//                }

            }
            if (col < 1 || row < 1) {
                JOptionPane.showConfirmDialog(null, "You entered wrong dimensions",
                        "Error", JOptionPane.PLAIN_MESSAGE);
                col = lastCol;
                row = lastRow;
            } else if (col > 10 || row > 10) {
                JOptionPane.showConfirmDialog(null, "Please enter dimensions below 10",
                        "Error", JOptionPane.PLAIN_MESSAGE);
                col = lastCol;
                row = lastRow;
            } else {
                tempMatrix = myMatrix;
                myMatrix = new double[row][col];
                if (!setElements(myMatrix, "Fill your new matrix")) //filling the new matrix
                {
                    //backup

                    myMatrix = tempMatrix;
                }
            }
        } else if (result == 1) {
            col = lastCol;
            row = lastRow;
        }
    }

    private static void showMatrix(double[][] matrix, String title) {
        int temp, temp1;             //temprature variable

        JPanel choosePanel[] = new JPanel[matrix.length + 1];
        choosePanel[0] = new JPanel();
        choosePanel[0].add(new JLabel(title));

        for (temp = 1; temp <= matrix.length; temp++) {
            choosePanel[temp] = new JPanel();

            for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                if (matrix[temp - 1][temp1] == -0) {
                    matrix[temp - 1][temp1] = 0;
                }
                choosePanel[temp].add(new JLabel(String.format("%.2f", matrix[temp - 1][temp1])));

                if (temp1 < matrix[0].length - 1) {
                    choosePanel[temp].add(Box.createHorizontalStrut(15)); // a spacer
                }

            }//end col loop

        }//end row loop

        if (col == 0 || row == 0) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
        } else {

            JOptionPane.showMessageDialog(null, choosePanel, null,
                    JOptionPane.PLAIN_MESSAGE, null);
        }
    }

    private static void matrixPlusMatrix() {
        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
        } else {
            double m2[][] = new double[row][col];
            double sum[][] = new double[row][col];
            if (setElements(m2, "Fill Aditional Matrix")) {
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < col; j++) {
                        sum[i][j] = myMatrix[i][j] + m2[i][j];
                    }
                }
                showMatrix(sum, "Summition Result");
            }
        }//end else checking
    }//end plus matrix

    private static void matrixMinusMatrix() {

        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
        } else {
            double m2[][] = new double[row][col];
            double sub[][] = new double[row][col];
            double temp[][] = new double[row][col];

            if (setElements(m2, "Fill Subtracting Matrix")) {

                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < col; j++) {
                        temp[i][j] = (-1 * m2[i][j]);
                        sub[i][j] = myMatrix[i][j] + temp[i][j];
                    }
                }
                showMatrix(sub, "Subtracting Result");
            }
        }//end else of checking
    }

    private static void multiplyByMatrix() {

        JTextField wField = new JTextField(5); //col field
        int col2 = 0;
        double m2[][], results[][];
        int sum;

        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
        } else {

            //design input line
            JPanel choosePanel[] = new JPanel[2];
            choosePanel[0] = new JPanel();
            choosePanel[1] = new JPanel();

            choosePanel[0].add(new JLabel("Enter Dimensitions"));

            choosePanel[1].add(new JLabel("Rows:"));
            choosePanel[1].add(new JLabel("" + col));
            choosePanel[1].add(Box.createHorizontalStrut(15)); // a spacer
            choosePanel[1].add(new JLabel("Cols:"));
            choosePanel[1].add(wField);

            result = JOptionPane.showConfirmDialog(null, choosePanel,
                    null, JOptionPane.PLAIN_MESSAGE,
                    JOptionPane.PLAIN_MESSAGE);

            if (result == 0) {
                if (wField.getText().equals("")) {
                    col2 = 0;
                } else {
//                    if (isInt(wField.getText())) {
                        col2 = Integer.parseInt(wField.getText());

//                    }
                }

                m2 = new double[col][col2];
                results = new double[row][col2];
                if (setElements(m2, "Fill multiplying matrix")) {

                    for (int i = 0; i < row; i++) {
                        for (int j = 0; j < col2; j++) {
                            sum = 0;
                            for (int k = 0; k < col; k++) {
                                sum += myMatrix[i][k] * m2[k][j];
                            }

                            results[i][j] = sum;

                        }
                    }

                    showMatrix(results, "Mulitiplication Result");
                }//elements checking
            }//dimensions checking
            else {
                return;
            }
        }//end else of checking
    }//end multiply by matrix method

    private static void guiMultliplyByScaler() {

        double[][] results = new double[row][col];
        double x;
        String tempString;

        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
            return;
        }

        tempString = JOptionPane.showInputDialog(null,
                "Enter the scaler number for multiplying");

        if (tempString == null) //cancel option
        {
            return;
        } else if (!tempString.equals("")) {
            x = Double.parseDouble(tempString);
        } else {
            JOptionPane.showMessageDialog(null, "You haven't entered a scaler");
            return;
        }
        results = multliplyByScaler(myMatrix, x);
        showMatrix(results, "Multiplication Result");

    }//end multiply by number

    private static double[][] multliplyByScaler(double[][] matrix, double x) {

        double[][] results = new double[row][col];
        int i, j;

        for (i = 0; i < matrix.length; i++) {
            for (j = 0; j < matrix[0].length; j++) {
                results[i][j] = x * matrix[i][j];
            }
        }
        return results;
    }//end multiply by number

    private static void divideByScaler() {
        double[][] results = new double[row][col];
        int i, j;
        double x;
        String tempString;

        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
            return;
        }

        //prompting for the scaler
        tempString = JOptionPane.showInputDialog("Enter the scaler number for dividing");

        if (tempString == null) //cancel option
        {
            return;
        } else if (!tempString.equals("")) {
            x = Double.parseDouble(tempString);
        } else {
            JOptionPane.showMessageDialog(null, "You haven't entered a scaler");
            return;
        }

        if (x == 0) {
            JOptionPane.showMessageDialog(null, "Excuse me we can't divid by 0");
            return;
        }

        for (i = 0; i < row; i++) {
            for (j = 0; j < col; j++) {
                results[i][j] = myMatrix[i][j] / x;
            }
        }
        showMatrix(results, "Dividing Result");

    }

    private static void guiTransposing(double[][] matrix) {
        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
            return;
        }

        double[][] transMatrix = new double[matrix[0].length][matrix.length];

        transMatrix = transposing(matrix);

        showMatrix(transMatrix, "Trasnposing Matrix");
    }

    private static double[][] transposing(double[][] matrix) {
        double[][] transportMatrix = new double[matrix[0].length][matrix.length];
        int temp1, temp; //termprature variable

        for (temp = 0; temp < matrix[0].length; temp++) {
            for (temp1 = 0; temp1 < matrix.length; temp1++) {
                transportMatrix[temp][temp1]
                        = matrix[temp1][temp]; //swap (temp, temp1)
            }
        }
        return transportMatrix;
    }

    private static void guiGetValue() {
        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
        } else if (col != row) {
            JOptionPane.showMessageDialog(null, "You must enter square matrix");
        } else {
            double result = getValue(myMatrix);

            JOptionPane.showMessageDialog(null, String.format("Determination's Value = %.2f",
                    getValue(myMatrix)), null,
                    JOptionPane.PLAIN_MESSAGE, null);
        }
    }//end gui get Value

    private static void swap(double[] res1, double[] res2) {
        int temp;
        double tempDouble;

        for (temp = 0; temp < res1.length; temp++) {
            tempDouble = res1[temp];
            res1[temp] = res2[temp];
            res2[temp] = tempDouble;
        }

    }

    private static double getValue(double[][] matrix) {
        int temp, temp1, temp2;
        double coeficient;
        double result = 1;
        int sign = 1;       //1 for positive
        //-1 for negative
        int zeroCounter;

        double res[][] = new double[matrix.length][matrix[0].length];

        //copy matrix
        for (temp = 0; temp < matrix.length; temp++) {
            for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                res[temp][temp1] = matrix[temp][temp1];;
            }

        }

        //rearrange rows
        for (temp = 0; temp < res.length; temp++) {
            if (res[temp][temp] != 0) {
                continue;
            }

            for (temp1 = 1; temp1 < res.length - 1; temp1++) {
                if (res[(temp1 + temp) % matrix.length][temp] != 0) {       //swapping
                    swap(res[temp], res[(temp1 + temp) % res.length]);
                    sign *= -1;
                    break;
                }
            }
        }

        //starting simplifing with gaues method
        for (temp = 1; temp < res.length; temp++) {
            for (temp1 = 0; temp1 < temp; temp1++) {
                //if required element = 0 || division = 0
                if (res[temp][temp1] == 0 || res[temp1][temp1] == 0) {
                    continue;
                } else {
                    zeroCounter = 0;
                    coeficient = res[temp][temp1] / res[temp1][temp1];
                }
                for (temp2 = 0; temp2 < res.length; temp2++) {
                    res[temp][temp2] = res[temp][temp2]
                            - res[temp1][temp2] * coeficient;

                    if (res[temp][temp2] == 0) {
                        zeroCounter++;
                    }
                }
                //over flow zeros
                if (temp < res.length - 1 && zeroCounter > temp) {
                    swap(res[temp], res[temp + 1]);
                    sign *= -1;
                    temp--;
                }
            }
        }

        for (temp = 0; temp < res.length; temp++) {
            result *= res[temp][temp];
        }
        return result * sign;
    }

    private static void inverse() {
        if (myMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "You haven't entered any matrix");
            return;
        } else if (col != row) {
            JOptionPane.showMessageDialog(null, "You must enter square matrix");
            return;
        } else if (getValue(myMatrix) == 0) {
            JOptionPane.showMessageDialog(null, "Your Matrix "
                    + "hasn't an inverse one\n\n"
                    + "Because its value = 0");
            return;
        }

        double[][] inverseMatrix = new double[row][col];
        double[][] minor = new double[row - 1][col - 1];
        double[][] cofactor = new double[row][col];
        double delta; //myMatrix value
        int temp, temp1;

        //get cofactor
        for (temp = 0; temp < row; temp++) {
            for (temp1 = 0; temp1 < col; temp1++) {
                minor = getMinor(temp, temp1);
                double minorValue = getValue(minor);
                cofactor[temp][temp1] = Math.pow(-1.0, temp + temp1) * getValue(minor);
            }
        }//end cofactor looping

        //transport cofactor to get ADJ
        cofactor = transposing(cofactor);
        delta = getValue(myMatrix);       //count Matrix's 

        for (temp = 0; temp < row; temp++) {
            for (temp1 = 0; temp1 < col; temp1++) {
                inverseMatrix[temp][temp1] = cofactor[temp][temp1] / delta;
            }
        }

        showMatrix(inverseMatrix, "Inversing Matrix");

    }//end inverse

    private static double[][] getMinor(int i, int j) {
        // i for order in row
        //j for order in col
        double[][] results = new double[row - 1][col - 1];
        int row_count = 0, col_count = 0;
        int temp, temp1;

        for (temp = 0; temp < row; temp++) {
            for (temp1 = 0; temp1 < col; temp1++) {
                if (temp != i && temp1 != j) {
                    results[row_count][col_count] = myMatrix[temp][temp1];
                    col_count++;
                }
            }//end col loop
            col_count = 0;
            if (i != temp) {
                row_count++;
            }
        }//end row loop

        return results;
    }

    private void showmtrxActionPerformed(java.awt.event.ActionEvent evt) {                                         
        showMatrix(myMatrix, "Your Matrix");
    }                                        

    private void additionMatrixActionPerformed(java.awt.event.ActionEvent evt) {                                               
        matrixPlusMatrix();
    }                                              

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        getDimension();
    }                                         

    private void substractMatrixActionPerformed(java.awt.event.ActionEvent evt) {                                                
        matrixMinusMatrix();
    }                                               

    private void multiplyMatrixActionPerformed(java.awt.event.ActionEvent evt) {                                               
        multiplyByMatrix();
    }                                              

    private void multiplyScalarActionPerformed(java.awt.event.ActionEvent evt) {                                               
        guiMultliplyByScaler();
    }                                              

    private void divideScalerActionPerformed(java.awt.event.ActionEvent evt) {                                             
        divideByScaler();
    }                                            

    private void transposeMatrixActionPerformed(java.awt.event.ActionEvent evt) {                                                
        guiTransposing(myMatrix);
    }                                               

    private void determinantMatrixActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        guiGetValue();
    }                                                 

    private void inversMatrixActionPerformed(java.awt.event.ActionEvent evt) {                                             
        inverse();
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(matrixcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(matrixcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(matrixcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(matrixcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new matrixcalc().setVisible(true);
            }
        });
    }

    private static boolean isInt(String str) {
        int temp;
        if (str.length() == '0') {
            return false;
        }

        for (temp = 0; temp < str.length(); temp++) {
            if (str.charAt(temp) != '+' && str.charAt(temp) != '-'
                    && !Character.isDigit(str.charAt(temp))) {
                return false;
            }
        }
        return true;
    }

    private static boolean setElements(double matrix[][], String title) {
        int temp, temp1;             //temprature variable
        String tempString;

        JPanel choosePanel[] = new JPanel[row + 2];
        choosePanel[0] = new JPanel();
        choosePanel[0].add(new Label(title));
        choosePanel[choosePanel.length - 1] = new JPanel();
        choosePanel[choosePanel.length - 1].add(new Label("consider space field as zeros"));
        inputField = new JTextField[matrix.length][matrix[0].length];

        //lenght loop
        for (temp = 1; temp <= matrix.length; temp++) {
            choosePanel[temp] = new JPanel();

            for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                inputField[temp - 1][temp1] = new JTextField(3);
                choosePanel[temp].add(inputField[temp - 1][temp1]);

                if (temp1 < matrix[0].length - 1) {
                    choosePanel[temp].add(Box.createHorizontalStrut(15)); // a spacer
                }

            }//end col loop

        }//end row loop

        result = JOptionPane.showConfirmDialog(null, choosePanel,
                null, JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == 0) {
            checkTextField(inputField);
            for (temp = 0; temp < matrix.length; temp++) {
                for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                    tempString = inputField[temp][temp1].getText();

//                    if (isDouble(tempString)) {
                        matrix[temp][temp1] = Double.parseDouble(inputField[temp][temp1].getText());
//                    } else {
//                        JOptionPane.showMessageDialog(null, "You entered wrong elements");
//
//                        //backup
//                        col = lastCol;
//                        row = lastRow;
//
//                        return false;
//                    }
                }
            }
            return true;
        } else {
            return false;
        }

    }

    private static boolean isDouble(String str) {
        int temp;
        if (str.length() == '0') {
            return false;
        }

        for (temp = 0; temp < str.length(); temp++) {
            if (str.charAt(temp) != '+' && str.charAt(temp) != '-'
                    && str.charAt(temp) != '.'
                    && !Character.isDigit(str.charAt(temp))) {
                return false;
            }
        }
        return true;
    }

    private static void checkTextField(JTextField field[][]) {
        for (int temp = 0; temp < field.length; temp++) {
            for (int temp1 = 0; temp1 < field[0].length; temp1++) {
                if (field[temp][temp1].getText().equals("")) {
                    field[temp][temp1].setText("0");
                }
            }
        }
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton additionMatrix;
    private javax.swing.JButton determinantMatrix;
    private javax.swing.JButton divideScaler;
    private javax.swing.JButton inversMatrix;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton multiplyMatrix;
    private javax.swing.JButton multiplyScalar;
    private javax.swing.JButton showmtrx;
    private javax.swing.JButton substractMatrix;
    private javax.swing.JButton transposeMatrix;
    // End of variables declaration                   
}
